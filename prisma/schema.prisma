datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  tags      String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  posts     Post[]

  @@map(name: "users")
}

model QUsers {
  user_id        String    @id @default(cuid())
  first_name     String?
  last_name      String?
  email          String?   @unique
  password       String?
  last_login     DateTime  @default(now())
  created_at     DateTime  @default(now()) // @map(name: "created_at")
  updated_at     DateTime  @updatedAt // @map(name: "updated_at")
  email_verified DateTime?
  quizzes        Quizzes[]
  accounts       Account[]
  sessions       Session[]

  @@map(name: "qusers")
}

model Quizzes {
  id          Int            @id @default(autoincrement())
  quiz_id     String?        @unique
  title       String?
  description String?
  user_id     String?
  is_active   Boolean        @default(false)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  questions   Questions[]
  categories  CategoryQuiz[]
  user        QUsers?        @relation(fields: [user_id], references: [user_id])

  @@map(name: "quizzes")
}

model Questions {
  question_id String   @id @default(cuid())
  question    String?
  is_active   Boolean  @default(false)
  score       Int?
  choices     Json?
  quiz_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  quiz        Quizzes  @relation(fields: [quiz_id], references: [quiz_id])

  @@map(name: "questions")
}

model QuestionQuiz {
  category_id String   @id @default(cuid())
  name        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map(name: "question_quiz")
}

model Categories {
  category_id String         @id @default(cuid())
  name        String?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  quizzes     CategoryQuiz[]

  @@map(name: "categories")
}

model CategoryQuiz {
  quiz        Quizzes    @relation(fields: [quiz_id], references: [quiz_id])
  quiz_id     String
  category    Categories @relation(fields: [category_id], references: [category_id])
  category_id String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@id([quiz_id, category_id])
  @@map(name: "category_quiz")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?

  user QUsers @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map(name: "account")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          QUsers   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map(name: "session")
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   posts         Post[]
//   accounts      Account[]
//   sessions      Session[]
// }

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_token")
}
